<?php

/**
 *
 * @copyright  2020 objectivejs.org
 * @version    1
 * @link       http://www.objectivejs.org
 */
?>
<?php $debug=false; ?>
<?php $filetypes=array('image/jpeg', 'image/png', 'image/gif', 'image/svg+xml'); ?>
<?php $maxsize=1000000; ?>
<?php $imgname='image'; ?>
<?php $imgsrc='/files/images/loadimage.png'; ?>
<?php $imgwidth=320; ?>
<?php $imgheight=180; ?>
<?php $uploadurl='/uploadimage'; ?>
<?php $chunksize=100000; ?>
<?php $id=uniqid('id'); ?>
<style>
#<?php echo $id; ?> .ojs img {
	max-width: <?php echo $imgwidth; ?>px;
}
#<?php echo $id; ?> #uploadstatus {
	font-size: smaller;
}
</style>
<div id="<?php echo $id; ?>" class="noprint">
<div class="ojs">
<div>
<div class="ojs_undo">
<button type="submit" class="narrow control_undo" disabled><i class="fa fa-undo"></i></button>
<button type="submit" class="narrow control_redo" disabled><i class="fa fa-redo"></i></button>
</div>
<span class="ojs_dimension">
<input class="ojs_width" type="number" min="0"/>&nbsp;<i class="fa fa-arrows-alt-h small"></i>
<input class="ojs_height" type="number" min="0"/>&nbsp;<i class="fa fa-arrows-alt-v small"></i>
</span>
</div>
<div><img src="<?php echo $imgsrc; ?>" alt="" width="<?php echo $imgwidth; ?>" height="<?php echo $imgheight; ?>"/></div>
<div>
<span><button id="loadimage" type="submit" class="narrow"><i class="fa fa-file-image"></i></button></span>
<span><button id="uploadimage" type="submit" class="narrow"><i class="fa fa-file-export"></i></button></span>
<span id="uploadstatus"></span>
</div>
</div>
</div>
<?php head('javascript', '/objectivejs/Objective.js'); ?>
<?php head('javascript', '/objectivejs/Responder.js'); ?>
<?php head('javascript', '/objectivejs/View.js'); ?>
<?php head('javascript', '/objectivejs/Model.js'); ?>
<?php head('javascript', '/objectivejs/Validator.js'); ?>
<?php head('javascript', '/objectivejs/Editor.js'); ?>
<?php head('javascript', '/objectivejs/Inspector.js'); ?>
<?php head('javascript', '/objectivejs/NumberInspector.js'); ?>
<?php head('javascript', '/objectivejs/DimensionInspector.js'); ?>
<?php head('javascript', '/objectivejs/ImageInspector.js') ?>
<?php head('javascript', '/objectivejs/SequenceInspector.js') ?>
<?php head('javascript', '/objectivejs/ImageSizeInspector.js') ?>
<?php head('javascript', '/objectivejs/ImageModel.js'); ?>
<?php head('javascript', '/objectivejs/Undo.js'); ?>
<?php head('javascript', '/objectivejs/Panel.js'); ?>
<?php head('javascript', '/objectivejs/UndoPanel.js'); ?>
<?php head('javascript', '/objectivejs/ModelStorageDelegate.js'); ?>
<script>
function ImageLoader(model, inspectors, panel, upload, status) {
	Editor.call(this, model, null, inspectors, panel);

	if (upload)
		upload.onclick = () => this.upload();

	this._upload = upload;
	this._status = status;
}

ImageLoader.prototype = Object.create(Editor.prototype);

Object.defineProperty(ImageLoader.prototype, 'constructor', { value: ImageLoader, enumerable: false, writable: true });

ImageLoader.uploadURL = '/uploadimage';
ImageLoader.chunkSize = 100000;

ImageLoader.prototype.upload = function() {
	const {image} = this._model.get();

	if (image.image === null)
		return;

	const [url] = image.image;
	const [width, height] = image.size;

	const imgtype = /^data:(image\/[-.+0-9a-zA-Z]+);base64,/.exec(url)[1];
	const imgdata = atob(url.substring(url.indexOf(',')+1));
	const imgsize = imgdata.length;

	const uploadurl = ImageLoader.uploadURL;
	const chunksize = ImageLoader.chunkSize;

	let offset = 0;
	let progress = 0;

	const uploadslice = () => {
		if (this._status && imgsize > chunksize)
			this._status.innerText = `${progress}%`;

		const data = imgdata.substring(offset, offset + chunksize);

		$.post(uploadurl, {file_size: imgsize, file_type: imgtype, file_offset: offset, file_data: btoa(data), image_width: width, image_height: height })
			.done(() => {
				offset += data.length;
				progress = Math.floor((offset / imgsize) * 100);

				if (progress < 100)
					uploadslice();
				else {
					if (this._status)
						this._status.innerHTML = '<i class="fa fa-check-circle"></i>';
					if (this._upload)
						this._upload.disabled = false;
				}
			})
			.fail(() => {
				if (this._status)
					this._status.innerHTML = '<i class="fa fa-exclamation-circle inerror"></i>';
				if (this._upload)
					this._upload.disabled = false;
			});
	};

	if (this._status)
		this._status.innerText = '';

	if (this._upload && imgsize > chunksize)
		this._upload.disabled = true;

	uploadslice();
}
</script>
<script>
<?php if (!$debug): ?>
(function() {
<?php endif; ?>
	const model = new ImageModel('<?php echo $imgname; ?>');

	const container = document.querySelector('#<?php echo $id; ?>');

	const panel = new UndoPanel();

	panel.setManagedWidget(container.querySelector('.ojs_undo')).resetWidget();

	const filetypes = [<?php echo implode(',', array_map(function($s) { return "'$s'"; }, $filetypes)); ?>];

	const imageInspector = new ImageInspector(null, { filetypes: filetypes, maxsize: <?php echo $maxsize; ?> });

	imageInspector.setManagedWidget(container.querySelector('img'));

	const sizeInspector = new DimensionInspector(0, 0, {minWidth: 0, minHeight: 0});

	sizeInspector.setManagedWidget(container.querySelector('.ojs_dimension')).resetWidget();

	const imageSizeInspector = new ImageSizeInspector(imageInspector, sizeInspector);

	const loadimage = container.querySelector('#loadimage');

	loadimage.onclick = () => imageInspector.loadImage();

	const inspectors = {
		image:		imageSizeInspector
	};

	const uploadimage = container.querySelector('#uploadimage');
	const uploadstatus = container.querySelector('#uploadstatus');

	const editor = new ImageLoader(model, inspectors, panel, uploadimage, uploadstatus);

	model.setDelegate(new ModelStorageDelegate());

	model.readIn();

	model.enableSync();
<?php if (!$debug): ?>
})();
<?php endif; ?>
</script>
